using System;
using System.Data.SqlClient;
using System.Windows.Forms;
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Windows.Forms;


namespace WarnetPABD
{
    public partial class DeviceForm : Form
    {
        public DeviceForm()
        {
            InitializeComponent();
            LoadDeviceData(); // Memuat data perangkat saat form dimuat
            AutoGenerateDeviceID(); // Menghasilkan DeviceID secara otomatis
        }

        // Fungsi untuk menghasilkan DeviceID otomatis
        private void AutoGenerateDeviceID()
        {
            string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "SELECT MAX(CAST(SUBSTRING(DeviceID, 2, 3) AS INT)) FROM Device";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    object result = cmd.ExecuteScalar();

                    // Menentukan DeviceID berikutnya
                    int nextDeviceID = result != DBNull.Value ? Convert.ToInt32(result) + 1 : 1;
                    txtDeviceID.Text = "D" + nextDeviceID.ToString("D3"); // Format DeviceID dengan 3 digit, contohnya "D001"
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Terjadi kesalahan saat menghasilkan DeviceID: {ex.Message}");
            }
        }

        // Memuat data perangkat ke dalam DataGridView
        private void LoadDeviceData()
        {
            string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "SELECT DeviceID, Spek, LokasiPC, StatusPC FROM Device";
                    SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
                    System.Data.DataTable dataTable = new System.Data.DataTable();
                    adapter.Fill(dataTable);
                    dgvDevices.DataSource = dataTable;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Terjadi kesalahan saat memuat data perangkat: {ex.Message}");
            }
        }

        // Tombol untuk menambah perangkat baru
        private void btnAddDevice_Click(object sender, EventArgs e)
        {
            string deviceID = txtDeviceID.Text;
            string spek = txtSpek.Text;
            string lokasiPC = txtLokasiPC.Text;
            string status = cmbStatus.SelectedItem?.ToString();

            if (string.IsNullOrEmpty(spek) || string.IsNullOrEmpty(lokasiPC) || string.IsNullOrEmpty(status))
            {
                MessageBox.Show("Semua field harus diisi!");
                return;
            }

            string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "INSERT INTO Device (DeviceID, Spek, LokasiPC, StatusPC) VALUES (@deviceID, @spek, @lokasiPC, @status)";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@deviceID", deviceID);
                    cmd.Parameters.AddWithValue("@spek", spek);
                    cmd.Parameters.AddWithValue("@lokasiPC", lokasiPC);
                    cmd.Parameters.AddWithValue("@status", status);
                    cmd.ExecuteNonQuery();

                    MessageBox.Show("Perangkat berhasil ditambahkan!");
                    LoadDeviceData(); // Memuat ulang data perangkat setelah penambahan
                    ClearForm(); // Mengosongkan form setelah ditambah
                    AutoGenerateDeviceID(); // Menghasilkan DeviceID baru
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Terjadi kesalahan saat menambah perangkat: {ex.Message}");
            }
        }

        // Tombol untuk memperbarui data perangkat yang sudah ada
        private void btnUpdateDevice_Click(object sender, EventArgs e)
        {
            string deviceID = txtDeviceID.Text;
            string spek = txtSpek.Text;
            string lokasiPC = txtLokasiPC.Text;
            string status = cmbStatus.SelectedItem?.ToString();

            if (string.IsNullOrEmpty(spek) || string.IsNullOrEmpty(lokasiPC) || string.IsNullOrEmpty(status))
            {
                MessageBox.Show("Semua field harus diisi!");
                return;
            }

            string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "UPDATE Device SET Spek = @spek, LokasiPC = @lokasiPC, StatusPC = @status WHERE DeviceID = @deviceID";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@deviceID", deviceID);
                    cmd.Parameters.AddWithValue("@spek", spek);
                    cmd.Parameters.AddWithValue("@lokasiPC", lokasiPC);
                    cmd.Parameters.AddWithValue("@status", status);
                    cmd.ExecuteNonQuery();

                    MessageBox.Show("Perangkat berhasil diperbarui!");
                    LoadDeviceData(); // Memuat ulang data perangkat setelah update
                    ClearForm(); // Mengosongkan form setelah diupdate
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Terjadi kesalahan saat memperbarui perangkat: {ex.Message}");
            }
        }

        // Tombol untuk menghapus perangkat yang dipilih
        private void btnDeleteDevice_Click(object sender, EventArgs e)
        {
            string deviceID = txtDeviceID.Text;

            if (string.IsNullOrEmpty(deviceID))
            {
                MessageBox.Show("Device ID harus dipilih terlebih dahulu!");
                return;
            }

            string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "DELETE FROM Device WHERE DeviceID = @deviceID";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    cmd.Parameters.AddWithValue("@deviceID", deviceID);
                    int rowsAffected = cmd.ExecuteNonQuery();

                    if (rowsAffected > 0)
                    {
                        MessageBox.Show("Perangkat berhasil dihapus!");
                        LoadDeviceData(); // Memuat ulang data perangkat setelah penghapusan
                        ClearForm(); // Mengosongkan form setelah dihapus
                    }
                    else
                    {
                        MessageBox.Show("Device ID tidak ditemukan.");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Terjadi kesalahan saat menghapus perangkat: {ex.Message}");
            }
        }

        // Tombol untuk menyegarkan DataGridView dan mengosongkan form
        private void btnRefresh_Click(object sender, EventArgs e)
        {
            LoadDeviceData(); // Memuat ulang data perangkat
            ClearForm(); // Mengosongkan form
        }



        private void btnImport_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Excel Files|*.xlsx;*.xls";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;
                PreviewDevice previewForm = new PreviewDevice(filePath);
                previewForm.ShowDialog();

                // Setelah form preview ditutup, refresh DataGridView
                LoadDeviceData();
            }
        }

        // Fungsi untuk mengosongkan form
        private void ClearForm()
        {
            txtDeviceID.Clear();
            txtSpek.Clear();
            txtLokasiPC.Clear();
            cmbStatus.SelectedIndex = -1;
        }

        // Event handler untuk ketika pengguna memilih data perangkat di DataGridView
        private void dgvDevices_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                DataGridViewRow row = dgvDevices.Rows[e.RowIndex];
                txtDeviceID.Text = row.Cells["DeviceID"].Value.ToString();
                txtSpek.Text = row.Cells["Spek"].Value.ToString();
                txtLokasiPC.Text = row.Cells["LokasiPC"].Value.ToString();
                cmbStatus.SelectedItem = row.Cells["StatusPC"].Value.ToString();
            }
        }
    }
}
