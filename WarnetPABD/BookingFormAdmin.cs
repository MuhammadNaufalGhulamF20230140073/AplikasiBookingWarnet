using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
using Microsoft.Reporting.WinForms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;

namespace WarnetPABD
{
    public partial class BookingFormAdmin : Form
    {
        // --- Fields ---
        private string connectionString = @"Server=DESKTOP-4D54309; Database=WarnetDB; Integrated Security=True;";
        private Microsoft.Reporting.WinForms.ReportViewer reportViewer1;

        // Note: It's assumed controls like txtBookingID, txtUsername, txtDeviceID (ComboBox),
        // txtDurasi, btnCreate, btnUpdate, btnDelete, and btnRefresh are already
        // declared in your BookingFormAdmin.Designer.cs file.
        // If not, you must declare them here.

        // --- Constructor ---
        public BookingFormAdmin()
        {
            InitializeComponent(); // This is generated by the designer
            InitializeCustomComponents(); // Custom setups
            InitializeReportViewer();
        }

        // --- Event Handlers ---

        /// <summary>
        /// Handles the form's Load event to populate data on startup.
        /// </summary>
        private void BookingFormAdmin_Load(object sender, EventArgs e)
        {
            // Load initial data for the grid and the device dropdown
            LoadBookings();
            LoadAvailableDevices();
        }

        /// <summary>
        /// Populates the input fields when a user clicks a row in the DataGridView.
        /// </summary>
        private void dgvBookings_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            // Ensure the click is on a valid row (not the header)
            if (e.RowIndex >= 0)
            {
                DataGridViewRow row = dgvBookings.Rows[e.RowIndex];

                // Populate the textboxes and combobox with data from the selected row
                txtBookingID.Text = row.Cells["BookingID"].Value.ToString();
                txtUsername.Text = row.Cells["Username"].Value.ToString();
                txtDurasi.Text = row.Cells["Durasi"].Value.ToString();

                // Set the ComboBox text. Using .Text is more robust than .SelectedItem
                // as it displays the DeviceID even if it's not in the "available" list.
                txtDeviceID.Text = row.Cells["DeviceID"].Value.ToString();
            }
        }

        private void btnImport_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "CSV Files (*.csv)|*.csv",
                Title = "Pilih file CSV untuk diimport"
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    DataTable importedData = new DataTable();
                    using (var reader = new StreamReader(openFileDialog.FileName))
                    {
                        string[] headers = reader.ReadLine().Split(',');
                        foreach (string header in headers)
                        {
                            importedData.Columns.Add(header.Trim());
                        }

                        while (!reader.EndOfStream)
                        {
                            string[] rows = reader.ReadLine().Split(',');
                            importedData.Rows.Add(rows);
                        }
                    }

                    // Buka form preview dan kirim datanya
                    Priview previewForm = new Priview(importedData);
                    previewForm.ShowDialog();

                    // Refresh data setelah import
                    LoadBookings();
                    LoadAvailableDevices();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Gagal membaca file CSV: " + ex.Message);
                }
            }
        }


        /// <summary>
        /// Refreshes the data in the DataGridView and the available devices list.
        /// </summary>
        private void btnRefresh_Click(object sender, EventArgs e)
        {
            LoadBookings();
            LoadAvailableDevices();
            MessageBox.Show("Data has been refreshed.", "Refresh", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        /// <summary>
        /// Handles creating a new booking.
        /// </summary>
        private void btnCreate_Click(object sender, EventArgs e)
        {
            // Your existing create logic is here...
            string username = txtUsername.Text.Trim();
            string deviceId = txtDeviceID.Text.Trim();
            int durasi = int.Parse(txtDurasi.Text);

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("sp_TambahBooking", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Username", username);
                cmd.Parameters.AddWithValue("@DeviceID", deviceId);
                cmd.Parameters.AddWithValue("@Durasi", durasi);

                try
                {
                    cmd.ExecuteNonQuery();
                    MessageBox.Show("Booking successful!");
                    LoadBookings(); // Refresh data after creating
                    LoadAvailableDevices();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        /// <summary>
        /// Handles updating an existing booking.
        /// </summary>
        private void btnUpdate_Click(object sender, EventArgs e)
        {
            // Your existing update logic is here...
            if (int.TryParse(txtBookingID.Text, out int bookingID))
            {
                string deviceID = txtDeviceID.Text; // Use .Text from ComboBox
                int duration = int.Parse(txtDurasi.Text);

                try
                {
                    using (SqlConnection conn = new SqlConnection(connectionString))
                    {
                        conn.Open();
                        SqlCommand cmd = new SqlCommand("sp_UpdateBooking", conn);
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.AddWithValue("@BookingID", bookingID);
                        cmd.Parameters.AddWithValue("@DeviceID", deviceID);
                        cmd.Parameters.AddWithValue("@Durasi", duration);

                        int rowsAffected = cmd.ExecuteNonQuery();

                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("Booking updated successfully!");
                            LoadBookings();
                            LoadAvailableDevices();
                        }
                        else
                        {
                            MessageBox.Show("No data was updated.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error updating booking: " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Booking ID to update.");
            }
        }

        /// <summary>
        /// Handles deleting a booking.
        /// </summary>
        private void btnDelete_Click(object sender, EventArgs e)
        {
            // Your existing delete logic is here...
            if (int.TryParse(txtBookingID.Text.Trim(), out int bookingID))
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(connectionString))
                    {
                        conn.Open();
                        SqlCommand cmd = new SqlCommand("sp_HapusBooking", conn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@BookingID", bookingID);

                        int rowsAffected = cmd.ExecuteNonQuery();

                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("Booking deleted successfully!");
                            LoadBookings();         // Refresh data
                            LoadAvailableDevices(); // Refresh device combo box
                        }
                        else
                        {
                            MessageBox.Show("Booking not found.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid Booking ID.");
            }
        }

        // --- Data Loading Methods ---

        /// <summary>
        /// Loads or reloads all bookings from the database into the DataGridView.
        /// </summary>
        private void LoadBookings()
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT * FROM vw_LaporanBooking";
                    SqlDataAdapter da = new SqlDataAdapter(query, conn);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    dgvBookings.DataSource = dt; // Set the data source
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading booking data: {ex.Message}");
            }
        }

        /// <summary>
        /// Loads available devices into the DeviceID ComboBox.
        /// </summary>
        private void LoadAvailableDevices()
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "SELECT DeviceID FROM Device WHERE StatusPC = 'Tidak Terpakai'";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    SqlDataReader reader = cmd.ExecuteReader();

                    txtDeviceID.Items.Clear(); // Clear the combo box before filling it

                    while (reader.Read())
                    {
                        txtDeviceID.Items.Add(reader["DeviceID"].ToString());
                    }
                    reader.Close();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading devices: {ex.Message}");
            }
        }

        // --- Initialization ---

        /// <summary>
        /// Initializes custom components and wires up event handlers.
        /// </summary>
        private void InitializeCustomComponents()
        {
            // Set up DataGridView properties
            dgvBookings.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dgvBookings.AllowUserToAddRows = false;
            dgvBookings.ReadOnly = true;
            dgvBookings.SelectionMode = DataGridViewSelectionMode.FullRowSelect;

            // Wire up event handlers
            this.Load += BookingFormAdmin_Load;
            this.dgvBookings.CellClick += dgvBookings_CellClick;
            this.btnRefresh.Click += btnRefresh_Click;

            // Assuming these are already wired up by the designer, but good to ensure
            this.btnCreate.Click += btnCreate_Click;
            this.btnUpdate.Click += btnUpdate_Click;
            this.btnDelete.Click += btnDelete_Click;
        }

        private void InitializeReportViewer()
        {
            reportViewer1 = new Microsoft.Reporting.WinForms.ReportViewer();
            reportViewer1.Location = new System.Drawing.Point(20, 370);
            reportViewer1.Name = "reportViewer1";
            reportViewer1.Size = new System.Drawing.Size(700, 300);
            reportViewer1.TabIndex = 10;
            this.Controls.Add(reportViewer1);
        }

        // --- Other Button Clicks (To be implemented) ---
        private void btnExport_Click(object sender, EventArgs e)
        {
            // Your existing export logic
        }

        private void btnOptimize_Click(object sender, EventArgs e)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand(@"
                IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'idx_Booking_Username')
                    CREATE NONCLUSTERED INDEX idx_Booking_Username ON Booking(Username);

                IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'idx_Booking_DeviceID')
                    CREATE NONCLUSTERED INDEX idx_Booking_DeviceID ON Booking(DeviceID);

                IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'idx_Device_StatusPC')
                    CREATE NONCLUSTERED INDEX idx_Device_StatusPC ON Device(StatusPC);
            ", conn);

                    cmd.ExecuteNonQuery();
                    MessageBox.Show("Optimisasi query berhasil diterapkan.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Gagal melakukan optimisasi query: " + ex.Message);
            }
        }
    }
}